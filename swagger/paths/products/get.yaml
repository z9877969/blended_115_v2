tags:
  - Products
summary: Get products list
operationId: getAllProducts
description: 'Returns a list of all products'
security:
  - bearerAuth: []
parameters:
  - name: category
    in: query
    description: Product's category name
    schema:
      type: string
      enum:
        - books
        - electronics
        - clothing
        - other
  - name: minPrice
    in: query
    description: Min product price
    schema:
      type: number
      minimum: 0
      example: 100
  - name: maxPrice
    in: query
    description: Max product price
    schema:
      type: number
      minimum: 0
      example: 1000
responses:
  '200':
    description: 'Successful operation'
    content:
      application/json:
        schema:
          type: object
          description: Products response
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 200
            message:
              type: string
              example: 'Successfully found products!'
            data:
              type: array
              description: Products list
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: '65ca67e7ae7f10c88b598384'
                  name:
                    type: string
                    minLength: 1
                    maxLength: 24
                    example: Smartphone
                  price:
                    type: number
                    minimum: 0
                    maximum: 2000000
                    example: 40000
                  category:
                    type: string
                    enum:
                      - books
                      - electronics
                      - clothing
                      - other
                    example: electronics
                  description:
                    type: string
                    example: Some product description
  '400':
    description: Bad request
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 400
            message:
              type: string
              example: BadRequestError
            data:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: 'Invalid query parameters'
  '401':
    description: Unauthorized
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 401
            message:
              type: string
              example: UnauthorizedError
            data:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: 'Authentication required'
